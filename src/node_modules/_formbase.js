import {writable} from "svelte/store";
import * as messages from '../routes/_js/protos/time_pb.js'
import {notifier} from '../routes/_components/svelte-notifications/src/index.js'
import {goto} from '@sapper/app'
//fix when i press two times submit main table not show data
//on Edit page if error happens its not displayed.
//extra : when delete button should be disables
// ask : when base class has bind a method:`this.fetch = this.fetch.bind(this);` does derived class automatically bind this method too?
// svelte-js forms : validateOnChange='{true}' is default but its not working.
// on table if i use index +each('displayData as row (row.getUid())') table not update when fetch new data.
/*
when derive do:
on Constructor
1.define this.schema = yup schema
2.implement toInitialValues(m) => object
3.implement onFetch()
4.implement onSubmit(values)
5.implement onDelete(m)
 */
export class CRUDBase {
  constructor() {
    this.data = writable([]);
    this.er = writable("");
    this.initialValues = writable({});
    this.title_name = "User";

    this.fetch = this.fetch.bind(this);
    this.onFetch = this.onFetch.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.handleReset = this.handleReset.bind(this);
    this.onNewClick = this.onNewClick.bind(this);
    this.toInitialValues = this.toInitialValues.bind(this);
    this.setInitialValues = this.setInitialValues.bind(this);
    this.onEditClick = this.onEditClick.bind(this);
    this.deleteClick = this.deleteClick.bind(this);
    this.onDelete = this.onDelete.bind(this);
    this.showRpcError = this.showRpcError.bind(this);
    this.handleError = this.handleError.bind(this);
    this.getMeta = this.getMeta.bind(this);
    this.mutateSuccess = this.mutateSuccess.bind(this);
    this.deleteSuccess = this.deleteSuccess.bind(this);
    this.muCallback = this.muCallback.bind(this);
    this.delCallback = this.delCallback.bind(this);
    this.setData = this.setData.bind(this);
    this.getCallback = this.getCallback.bind(this);
    this.getReq = this.getReq.bind(this);

  }

  handleReset() {
    console.log('form has been reset');
  }

  onNewClick() {
    this.initialValues.set({});
  };

  onEditClick(m) {
    return () => {
      this.setInitialValues(m)
    }
  }

  // static function
  setUidArray(req, uids) {
    if (uids) {
      const uids_ = new messages.Uids();
      uids_.setUidsList(uids);
      req.setUids(uids_);
    }
  }

  showRpcError(error) {
    if (error) {
      this.er.set(JSON.stringify(error));
      return true;
    } else {
      return false;
    }
  }


  handleError(response, message, notify = 0) {
    switch (response.getStatus()) {
      case messages.ErrorStatus.UNAUTHORISED:
      case messages.ErrorStatus.OTHERERROR:
      default:
        let message_ = response.getErrorMsg();
        message_ += "\n";
        message_ += message;
        if (notify) {
          switch (notify) {
            case 1:
              notifier.info(message_);
              break;
            case 2:
              notifier.success(message_);
              break;
            case 3:
              notifier.warning(message_);
              break;
            case 4:
            default:
              notifier.danger(message_);
              break;
          }
        } else {
          this.er.set(message_);
        }
        break;
    }
  }

  //static function
  isOk(response) {
    return response.getStatus() === messages.ErrorStatus.OK;
  }

  deleteClick(m) {
    return () => {
      this.onDelete(m);
    }
  }

  s() {
    //return A.yup.string();
  }

  setInitialValues(m) {
    this.initialValues.set(this.toInitialValues(m));
  }

  getMeta() {
    return {}
  }

  //static function
  goBack() {
    window.history.back();
  }

  //static function
  goBackOrNavigate(path) {
    if (window.history.length === 1) {
      goto('/admin/users');
    } else {
      this.goBack();
    }
  }

  mutateSuccess(msg, path) {
    this.data.set([]);
    notifier.success(msg);
    this.goBackOrNavigate(path);
  }

  deleteSuccess(msg) {
    this.onFetch(this.arguments);
    notifier.success(msg);
  }

  muCallback(msg, path, setSubmitting) {
    return (err, res) => {
      setSubmitting(false);
      if (this.showRpcError(err)) {
      } else if (this.isOk(res)) {
        this.mutateSuccess(msg, path);
      } else this.handleError(res, '', 0);
    }
  }

  delCallback(msg, path) {
    return (err, res) => {
      if (this.showRpcError(err)) {
      } else if (this.isOk(res)) {
        this.deleteSuccess('User Deleted Successfully');
      } else this.handleError(res, '', 4)
    }
  }

  setData(uids, list) {
    this.data.set(list);
    if (uids) this.setInitialValues(list[0]);
  }

  getCallback(runFunction) {
    return (err, res) => {
      if (this.showRpcError(err)) {
      } else if (this.isOk(res)) {
        runFunction(res);
      } else this.handleError(res, '', 0);
    }
  }

  getReq(Class, uids) {
    const req = new Class;
    this.setUidArray(req, uids);
    return req;
  }

  handleSubmit({detail: {values, setSubmitting, resetForm}}) {
    this.er.set("");
    setSubmitting(true);
    return this.onSubmit(...arguments);
  }

  fetch() {
    //saveForLater(arguments)
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
    this.arguments = arguments;
    this.onFetch(...arguments);
  }
}
